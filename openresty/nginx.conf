upstream backend {
    # local development
    # server host.docker.internal:8080;
    # docker compose
    server backend:8080;
}

server {
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path /var/run/openresty/nginx-proxy;
    fastcgi_temp_path /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path /var/run/openresty/nginx-uwsgi;
    scgi_temp_path /var/run/openresty/nginx-scgi;

    listen            8090;
    server_name       demo-oidc.localhost;
    resolver          127.0.0.11 valid=1s ipv6=off;
    expires           0;
    add_header        Cache-Control 'no-store, no-cache';
    error_log       /dev/stdout         debug;

    location / {
        access_by_lua_block {
            local oidcOpts = { redirect_uri = "/redirect_uri",
              accept_none_alg = true,
              discovery = "http://sso:8080/realms/demo-oidc/.well-known/openid-configuration",
              client_id = "web",
              client_secret = "LZV5XQqP5PLG3QuaVhU72PsgHE7oGITH",
              redirect_uri_scheme = https,
              logout_path = "/logout",
              revoke_tokens_on_logout = true,
              session_contents = {access_token=true},
              access_token_expires_in = 3600,
              scope = "openid",
              redirect_after_logout_with_id_token_hint = true,
              ssl_verify = "no",
            }

            local sessionOpts = {
              name = "session-cookie",
              cookie = {
                path = "/",
                samesite = "Strict",
                lifetime = 60
              }
            }

            local res, err = require("resty.openidc").authenticate(oidcOpts, nil, nil, sessionOpts)
            if err then
                ngx.status = 401
                ngx.say(err)
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            ngx.req.set_header('Authorization', table.concat({"Bearer", res.access_token}, " "));
        }
        proxy_pass http://backend;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Host $http_host;
    }
}

